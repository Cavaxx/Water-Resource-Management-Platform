version: '3.8'
services:
<<<<<<< HEAD
=======
  # --------------------------------------------------------------------------
  # FLASK & MONGO
  # --------------------------------------------------------------------------
  flask_app:
    build:
      context: ./Interface
    container_name: flask_app_container
    ports:
      - "5001:5001"
    volumes:
      - ./Interface:/app
      - ./data:/app/data
    networks:
      - wm-network
    depends_on:
      - mongo
    environment:
      - FLASK_ENV=development
      - MONGO_URI=mongodb://mongodb_container:27017/water_management

>>>>>>> Develop
  mongo:
    image: mongo:latest
    container_name: mongodb_container
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - wm-network

  # --------------------------------------------------------------------------
  # MQTT BROKER
  # --------------------------------------------------------------------------
  mqtt-broker:
    image: eclipse-mosquitto:latest
    container_name: mqtt-broker
    ports:
      - "1883:1883"   # MQTT Default Port
    networks:
      - wm-network
    # (Optional) If you want to persist logs/data for Mosquitto:
    volumes:
      - mosquitto_data:/mosquitto/data
      - mosquitto_log:/mosquitto/log
      - ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf

  # --------------------------------------------------------------------------
  # MQTT INGESTION SERVICE
  # --------------------------------------------------------------------------
  mqtt_ingestion_service:
    build:
      context: ./data_ingestion
      dockerfile: Dockerfile
    container_name: mqtt_ingestion_service
    depends_on:
      - mongo
      - mqtt-broker
    networks:
      - wm-network
    environment:
      # Ensure the ingestion script uses these vars:
      - PYTHONUNBUFFERED=1
      - MONGO_URI=mongodb://mongodb_container:27017/
      - MQTT_BROKER=mqtt-broker
      - MQTT_PORT=1883
      # Define the MQTT topics you plan to subscribe to:
      - TOPICS=city/water_facilities,sensors_data/river,weather_data/city,SPET/PET/city
    command: ["python", "mqtt_ingestion.py"]

  # --------------------------------------------------------------------------
  # DATA MANAGEMENT SERVICES
  # (Now each fetcher/publisher can publish to MQTT if desired)
  # --------------------------------------------------------------------------
  fetch_insert_data:
    build:
      context: ./data_management
      dockerfile: Dockerfile
    container_name: fetch_insert_data_container
    depends_on:
      - mongo
      - mqtt-broker
    networks:
      - wm-network
    environment:
      - PYTHONUNBUFFERED=1
      - MONGO_URI=mongodb://mongodb_container:27017/water_management
      - MQTT_BROKER=mqtt-broker
      - MQTT_PORT=1883
    command: ["python", "fetch_insert_data_MDB.py"]

  fetch_insert_facilitiesdata:
    build:
      context: ./data_management
      dockerfile: Dockerfile
    container_name: fetch_insert_facilitiesdata_container
    depends_on:
      - mongo
      - mqtt-broker
    networks:
      - wm-network
    environment:
      - PYTHONUNBUFFERED=1
      - MONGO_URI=mongodb://mongodb_container:27017/water_management
      - MQTT_BROKER=mqtt-broker
      - MQTT_PORT=1883
    command: ["python", "fetch_insert_facilitesdata_MDB.py"]

  fetch_weather_data:
    build:
      context: ./data_management
      dockerfile: Dockerfile
    container_name: fetch_weather_data_container
    depends_on:
      - mongo
      - mqtt-broker
    networks:
      - wm-network
    environment:
      - PYTHONUNBUFFERED=1
      - MONGO_URI=mongodb://mongodb_container:27017/water_management
      - WEATHER_API_KEY=YOUR_API_KEY
      - MQTT_BROKER=mqtt-broker
      - MQTT_PORT=1883
    command: ["python", "fetch_weather_data.py"]

  synthetic_weather_data:
    build:
      context: ./data_management
      dockerfile: Dockerfile
    container_name: synthetic_weather_data_service
    depends_on:
      - mongo
      - mqtt-broker
    networks:
      - wm-network
    environment:
      - MONGO_URI=mongodb://mongodb_container:27017/
      - DB_NAME=weather_db
      - COLLECTION_NAME=synthetic_weather_data
      - MQTT_BROKER=mqtt-broker
      - MQTT_PORT=1883
    command: ["python", "synthetic_weather_data.py"]

  # --------------------------------------------------------------------------
  # SPARK CLUSTER (MASTER + WORKERS)
  # --------------------------------------------------------------------------
  spark-master:
    build:
      context: ./spark_app
      dockerfile: dockerfiles/Dockerfile.SPEIMaster
    container_name: spark-master
    networks:
      - wm-network
    environment:
      SPARK_MODE: master
      SPARK_MASTER_HOST: spark-master
      SPARK_MASTER_PORT: 7077
      SPARK_MASTER_WEBUI_PORT: 8080
    ports:
      - "9090:8080"  # Spark Master UI
      - "7077:7077"  # Spark Master RPC
    depends_on:
      - mongo

  spark-worker-1:
    build:
      context: ./spark_app
      dockerfile: dockerfiles/Dockerfile.SPEIWorker
    container_name: spark-worker-1
    networks:
      - wm-network
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
    command: [ "bin/spark-class", "org.apache.spark.deploy.worker.Worker", "spark://spark-master:7077" ]
    depends_on:
      - spark-master

  spark-worker-2:
    build:
      context: ./spark_app
      dockerfile: dockerfiles/Dockerfile.SPEIWorker
    container_name: spark-worker-2
    networks:
      - wm-network
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=2g
    command: [ "bin/spark-class", "org.apache.spark.deploy.worker.Worker", "spark://spark-master:7077" ]
    depends_on:
      - spark-master

  # --------------------------------------------------------------------------
  # SPEI CALCULATOR SERVICE
  # --------------------------------------------------------------------------
  spei_calculator:
    build:
      context: ./spark_app
      dockerfile: dockerfiles/Dockerfile.SPEICalculator
    container_name: spei-calculator-container
    depends_on:
      - mongo
      - spark-master
      - spark-worker-1
      - spark-worker-2
    networks:
      - wm-network
    volumes:
      - ./spark_app:/app
    command: >
      /opt/bitnami/spark/bin/spark-submit
      --master spark://spark-master:7077
      --driver-memory 1g
      --packages org.mongodb.spark:mongo-spark-connector_2.12:10.3.0
      /app/spei_calculator.py
    environment:
      - MONGO_URI=mongodb://mongo:27017/
      - DB_NAME=water_management
      - INPUT_COLLECTIONS=weather_data,synthetic_weather_data
      - OUTPUT_COLLECTION=SPEI_PET

  spei_scheduler:
    build:
      context: ./spark_app
      dockerfile: dockerfiles/Dockerfile.SPEICron
    container_name: spei-scheduler-container
    depends_on:
      - spark-master
      - spark-worker-1
      - spark-worker-2
      - mongo
    networks:
      - wm-network
    environment:
      - MONGO_URI=mongodb://mongo:27017/
      - DB_NAME=water_management
      - INPUT_COLLECTIONS=weather_data,synthetic_weather_data
      - OUTPUT_COLLECTION=SPEI_PET
    volumes:
      - ./spark_app/spei_calculator.py:/opt/bitnami/spark/spei_app/spei_calculator.py

volumes:
  mongo-data:
  mosquitto_data:
  mosquitto_log:

networks:
  wm-network:
    driver: bridge
