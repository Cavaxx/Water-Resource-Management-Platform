version: '3.8'

services:
  flask_app:
    build:
      context: ./Interface  # The directory containing Dockerfile and app files for Flask
    container_name: flask_app_container
    ports:
      - "5001:5001"
    volumes:
      - ./Interface:/app  # Ensure only the Flask app directory is mounted to avoid conflicts
    networks:
      - wm-network
    depends_on:
      - mongo
    environment:
      - MONGO_URI=mongodb://mongodb_container:27017/water_management


  mongo:
    image: mongo:latest
    container_name: mongodb_container
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - wm-network

  app:
    build:
      context: .
      dockerfile: scr/data_management/Dockerfile
    container_name: fetch_insert_data_container
    volumes:
      - .:/app  # Mounts the current directory to /app for the data script
    ports:
      - "80:80"
    depends_on:
      - mongo
    networks:
      - wm-network
    environment:
      - PYTHONUNBUFFERED=1
  
    weather_fetcher:
    build:
      context: .
      dockerfile: scr/data_management/Dockerfile
    container_name: weather_fetcher_container
    volumes:
      - .:/app  # Mounts the current directory to /app for the weather script
    depends_on:
      - mongo
    networks:
      - wm-network
    environment:
      - MONGO_URI=mongodb://mongodb_container:27017/water_management
      - WEATHER_API_KEY=your_weather_api_key
      - LOCATION=London
    command: ["python", "/app/scr/data_management/fetch_weather_data.py"]


volumes:
  mongo-data:

networks:
  wm-network:
    driver: bridge


###### REASONING for both CDM and command in Dockerfile and docker-compose
#Including both CMD in the Dockerfile and command in docker-compose.yml is a recommended approach when:

#    You want a default behavior for standalone image use (CMD).
#    You need flexibility for different workflows in docker-compose (command).

#This keeps your setup efficient, reusable, and adaptable for future expansions.
